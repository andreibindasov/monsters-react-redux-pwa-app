{"version":3,"sources":["components/ErrorBoundry.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Card","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","onRequestMonsters","searchField","isPending","filteredMonsters","filter","toLowerCase","includes","connect","searchMonsters","requestMonsters","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initStateSearch","initStateMonsters","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1a8d057b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>Error occured...</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h3> {props.monster.name} </h3>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props)=>(\r\n  \r\n    <div className=\"card-list\">\r\n              \r\n        {props.monsters.map(monster =>(\r\n            <Card key={monster.id} monster={monster}/>\r\n        ))}\r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './searchbox.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=> (\r\n    <input \r\n    className=\"search\"\r\n    type=\"search\" \r\n    placeholder='search monsters' \r\n    onChange={handleChange}/>  \r\n)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './App.css';\n\nimport ErrorBoundry from './components/ErrorBoundry';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/searchbox/searchbox.component';\n\nimport { setSearchField, requestMonsters } from './actions'\n\nconst mapStateToProps = state => {\n  return{\n    searchField: state.searchMonsters.searchField,\n    monsters: state.requestMonsters.monsters,\n    isPending: state.requestMonsters.isPending,\n    error: state.requestMonsters.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestMonsters: () => dispatch(requestMonsters())\n  }\n}\n\nclass App extends Component {\n  // constructor(){\n  //   super();\n    \n  //   this.state={\n  //     monsters: [],\n  //     // searchField:''\n  //   };\n  // this.handleChange = this.handleChange.bind(this);\n    \n  // }\n\n    \n  componentDidMount(){\n          \n      // fetch('https://jsonplaceholder.typicode.com/users')\n      //   .then(res => res.json())\n      //   .then(users=> this.setState({monsters:users}));\n      this.props.onRequestMonsters()\n  }\n\n  // handleChange = e => {\n  //   this.setState({searchField: e.target.value})\n  // }\n\n  render(){\n    // const {monsters} = this.state;\n    const {searchField, handleChange, monsters, isPending} = this.props\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return isPending ? \n      <h1> LOADING... </h1> :\n      (\n        <div className=\"App\">\n            <h1>MONSTERS ROLODEX</h1>\n              <SearchBox\n                placeholder='search monsters'\n                handleChange={handleChange}\n              />\n            <hr></hr> \n            <ErrorBoundry>\n                <CardList monsters={filteredMonsters}/>\n            </ErrorBoundry>\n        </div>\n        \n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_MONSTERS_SUCCESS,\r\n    REQUEST_MONSTERS_PENDING,\r\n    REQUEST_MONSTERS_FAIL\r\n\r\n} from './constants'\r\n\r\nexport const setSearchField = (text) => {\r\n    \r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n    \r\n}\r\n\r\nexport const requestMonsters = () => (dispatch) =>{\r\n    dispatch({ type: REQUEST_MONSTERS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(data=>dispatch({ type: REQUEST_MONSTERS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_MONSTERS_FAIL, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = '_CHANGE_SEARCH_FIELD_'\r\n\r\nexport const REQUEST_MONSTERS_PENDING = 'REQUEST_MONSTERS_PENDING'\r\nexport const REQUEST_MONSTERS_SUCCESS = 'REQUEST_MONSTERS_SUCCESS'\r\nexport const REQUEST_MONSTERS_FAIL = 'REQUEST_MONSTERS_FAIL'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_MONSTERS_SUCCESS,\r\n    REQUEST_MONSTERS_PENDING,\r\n    REQUEST_MONSTERS_FAIL\r\n\r\n} from './constants'\r\n\r\nconst initStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchMonsters = (state=initStateSearch, action={})=>{\r\n   \r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state, {searchField: action.payload}) \r\n        default:\r\n            return state    \r\n    }\r\n}\r\n\r\nconst initStateMonsters = {\r\n    isPending:false,\r\n    monsters:[], \r\n    error: ''\r\n}\r\n\r\nexport const requestMonsters = (state=initStateMonsters, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_MONSTERS_PENDING:\r\n            return Object.assign({}, state, {isPending:true})\r\n        case REQUEST_MONSTERS_SUCCESS:\r\n            return Object.assign({}, state, {monsters: action.payload, isPending:false})\r\n        case REQUEST_MONSTERS_FAIL:\r\n            return Object.assign({}, state, {error:action.payload, isPending:false})\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider, connect } from 'react-redux'\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\nimport { createLogger } from 'redux-logger'\n\nimport thunkMiddleware from 'redux-thunk'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { searchMonsters, requestMonsters } from './reducers'\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({searchMonsters, requestMonsters})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(<Provider  store={store}>\n                    <App/>\n                </Provider>, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n\nserviceWorker.register();\n// if ('serviceWorker' in navigator){\n//     navigator.serviceWorker.register('service-worker.js')\n//     .then(function(registration){\n//         console.log('Hooray: ', registration.scope)\n//     }).catch(function(err){\n//         console.log('Whoops: ', err)\n//     })\n// }\n"],"sourceRoot":""}